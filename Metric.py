import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
from sqlalchemy import create_engine
from datetime import datetime
from pmdarima.arima import auto_arima
from sklearn.preprocessing import MinMaxScaler
from keras.models import load_model, Sequential
from keras.layers import LSTM, Dropout, Dense
from keras.callbacks import ModelCheckpoint
import matplotlib.pyplot as plt
import requests
from streamlit_extras.metric_cards import style_metric_cards
from scipy.stats import norm
import os
import urllib

# Setup Streamlit page configuration
st.set_page_config(page_title="Dashboard", page_icon="üåç", layout="wide")
st.header("PH√ÇN T√çCH D·ª∞ B√ÅO & ƒê·ªÄ XU·∫§T")
st.sidebar.image("images.jpeg",caption="")

with st.sidebar:
    selected = option_menu(
        menu_title="Main Menu",
        options=["Dashboard","Analytics", "Forecasting"],
        icons=["house", "eye"],
        menu_icon="cast",
        default_index=0
    )

# Load CSS for custom styling
with open('style.css', encoding='utf-8') as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


class DatabaseManager:
    def __init__(self, server, database, username, password):
        """
        Kh·ªüi t·∫°o ƒë·ªëi t∆∞·ª£ng DatabaseManager.

        Parameters:
            server (str): T√™n server SQL Server.
            database (str): T√™n database.
            username (str): T√™n t√†i kho·∫£n ƒëƒÉng nh·∫≠p.
            password (str): M·∫≠t kh·∫©u t√†i kho·∫£n.
        """
        self.server = server
        self.database = database
        self.username = username
        self.password = password
        self.engine = None

    def connect(self):
        """
        T·∫°o k·∫øt n·ªëi ƒë·∫øn SQL Server v√† kh·ªüi t·∫°o SQLAlchemy engine.
        """
        try:
            params = urllib.parse.quote_plus(
                f"DRIVER={{ODBC Driver 17 for SQL Server}};"
                f"SERVER={self.server};"
                f"DATABASE={self.database};"
                f"UID={self.username};"
                f"PWD={self.password};"
                f"Trusted_Connection=no;"
            )
            self.engine = create_engine(f"mssql+pyodbc:///?odbc_connect={params}")
        except Exception as e:
            st.write(f"Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database. L·ªói: {e}")
class FilterManager:
    def __init__(self, data):
        """
        Kh·ªüi t·∫°o FilterManager v·ªõi d·ªØ li·ªáu ƒë·∫ßu v√†o.
        
        Args:
            data (pd.DataFrame): D·ªØ li·ªáu c·∫ßn l·ªçc.
        """
        self.data = data

    def render_filters(self):
        """
        Hi·ªÉn th·ªã c√°c b·ªô l·ªçc tr√™n giao di·ªán Streamlit sidebar v√† tr·∫£ v·ªÅ c√°c gi√° tr·ªã ƒë√£ ch·ªçn.
        
        Returns:
            tuple: C√°c gi√° tr·ªã ƒë∆∞·ª£c ch·ªçn t·ª´ c√°c b·ªô l·ªçc.
        """
        # Filter options for brand
        brand = st.sidebar.multiselect(
            'SELECT BRAND',
            options=self.data['brand'].unique(),  # Kh√¥ng th√™m t√πy ch·ªçn 'All'
            default=self.data['brand'].unique()  # M·∫∑c ƒë·ªãnh ch·ªçn t·∫•t c·∫£ c√°c brand
        )

        # Filter options for type of perfume
        type_perfume = st.sidebar.multiselect(
            'SELECT TYPE OF PERFUME',
            options=self.data['type'].unique(),
            default=self.data['type'].unique()
        )

        # Price range filter
        min_price, max_price = self.data['price'].min(), self.data['price'].max()
        selected_price_range = st.sidebar.slider(
            'SELECT PRICE RANGE',
            min_value=min_price,
            max_value=max_price,
            value=(min_price, max_price)
        )

        # Other filters
        item_location = st.sidebar.multiselect(
            'SELECT ITEM LOCATION',
            options=self.data['itemLocation'].unique(),
            default=self.data['itemLocation'].unique()
        )

        weather = st.sidebar.multiselect(
            'SELECT WEATHER',
            options=self.data['weather'].unique(),
            default=self.data['weather'].unique()
        )

        address = st.sidebar.multiselect(
            'SELECT CUSTOMER ADDRESS',
            options=self.data['address'].unique(),
            default=self.data['address'].unique()
        )

        sex = st.sidebar.multiselect(
            'SELECT SEX',
            options=self.data['sex'].unique(),
            default=self.data['sex'].unique()
        )

        # Age range filter
        min_age, max_age = self.data['age'].min(), self.data['age'].max()
        selected_age_range = st.sidebar.slider(
            'SELECT AGE RANGE',
            min_value=min_age,
            max_value=max_age,
            value=(min_age, max_age)
        )

        # Datetime Filters
        st.sidebar.title('Datetime Filters')
        month_review_filter = st.sidebar.multiselect(
            'SELECT MONTH OF REVIEW',
            options=list(range(1, 13)),
            default=list(range(1, 13))
        )

        year_review_filter = st.sidebar.multiselect(
            'SELECT YEAR OF REVIEW',
            options=list(range(min(self.data['order_time']).year, max(self.data['order_time']).year + 1)),
            default=list(range(min(self.data['order_time']).year, max(self.data['order_time']).year + 1))
        )

        return (brand, type_perfume, selected_price_range, item_location, weather,
                address, sex, selected_age_range, month_review_filter, year_review_filter)
    def filter_forecasting(self):
        key_forecasting = None
        time_keyword = None
        location = None
        time_weather = None
        with st.sidebar.form(key="forecasting_form"):
            key_forecasting = st.text_input("Nh·∫≠p t·ª´ kh√≥a mu·ªën d·ª± b√°o l∆∞·ª£ng truy c·∫≠p:")
            time_keyword = st.text_input("Nh·∫≠p s·ªë th√°ng mu·ªën d·ª± b√°o l∆∞·ª£ng truy c·∫≠p:")

        # N√∫t submit cho form
            submit_forecasting = st.form_submit_button(label="Enter")

    # X·ª≠ l√Ω khi b·∫•m n√∫t "Enter" cho form d·ª± b√°o l∆∞·ª£ng truy c·∫≠p
        if submit_forecasting:
            if key_forecasting and time_keyword:
                st.write(f"B·∫°n ƒë√£ nh·∫≠p t·ª´ kh√≥a mu·ªën d·ª± b√°o: {key_forecasting} v√† th·ªùi gian d·ª± b√°o {time_keyword} th√°ng")
            else:
                st.warning("Vui l√≤ng nh·∫≠p gi√° tr·ªã!")

    # Form 2: D·ª± b√°o th·ªùi ti·∫øt
        with st.sidebar.form(key="weather_forecasting_form"):
            location = st.selectbox(
                'Ch·ªçn ƒë·ªãa ƒëi·ªÉm mu·ªën d·ª± b√°o',
                options=filtered_data['address'].unique(),  # C√°c l·ª±a ch·ªçn cho selectbox
                index=0  # T√πy ch·ªçn: b·∫°n c√≥ th·ªÉ thi·∫øt l·∫≠p l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh l√† ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n
            )
            time_weather = st.text_input("Nh·∫≠p th·ªùi gian mu·ªën d·ª± b√°o th·ªùi ti·∫øt:", value="90")

        # N√∫t "Enter Weather Time" ƒë·ªÉ submit form
            submit_weather = st.form_submit_button(label="Enter")

    # X·ª≠ l√Ω khi b·∫•m n√∫t "Enter" cho form d·ª± b√°o th·ªùi ti·∫øt
        if submit_weather:
            if time_weather:
                st.write(f"B·∫°n ƒë√£ nh·∫≠p th·ªùi gian d·ª± b√°o th·ªùi ti·∫øt: {time_weather}")
            else:
                st.warning("Vui l√≤ng nh·∫≠p gi√° tr·ªã!")

    # T√πy ch·ªânh CSS cho n√∫t ƒë·ªÉ thay ƒë·ªïi m√†u s·∫Øc n√∫t
        st.sidebar.markdown(
            '<style>div.stButton > button:first-child {color: red;}</style>',
            unsafe_allow_html=True
        )
        return  key_forecasting,location,time_keyword,time_weather
class CustomerMetrics:
    def __init__(self, data):
        """
        Kh·ªüi t·∫°o CustomerMetrics v·ªõi d·ªØ li·ªáu ƒë·∫ßu v√†o.

        Args:
            data (pd.DataFrame): D·ªØ li·ªáu giao d·ªãch.
        """
        self.data = data

    def calculate_customer_retention_rate(self, customer_id_col):
        """
        T√≠nh t·ª∑ l·ªá gi·ªØ ch√¢n kh√°ch h√†ng (Customer Retention Rate).

        Args:
            customer_id_col (str): T√™n c·ªôt ch·ª©a ID kh√°ch h√†ng.

        Returns:
            float: T·ª∑ l·ªá gi·ªØ ch√¢n kh√°ch h√†ng (ph·∫ßn trƒÉm).
        """
        initial_customers = self.data[customer_id_col].nunique()  # S·ªë kh√°ch h√†ng ban ƒë·∫ßu
        repeat_customers = self.data[customer_id_col].value_counts()[self.data[customer_id_col].value_counts() > 1].count()  # S·ªë kh√°ch h√†ng quay l·∫°i
        retention_rate = (repeat_customers / initial_customers) * 100 if initial_customers > 0 else 0  # T·ª∑ l·ªá gi·ªØ ch√¢n
        return retention_rate

    def calculate_total_orders(self, order_id_col):
        """
        T√≠nh t·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng.

        Args:
            order_id_col (str): T√™n c·ªôt ch·ª©a ID ƒë∆°n h√†ng.

        Returns:
            int: T·ªïng s·ªë l∆∞·ª£ng ƒë∆°n h√†ng.
        """
        total_orders = self.data[order_id_col].nunique()
        return total_orders

    def calculate_aov(self, total_col, order_id_col):
        """
        T√≠nh gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh (AOV).

        Args:
            total_col (str): T√™n c·ªôt ch·ª©a t·ªïng gi√° tr·ªã ƒë∆°n h√†ng.
            order_id_col (str): T√™n c·ªôt ch·ª©a ID ƒë∆°n h√†ng.

        Returns:
            float: Gi√° tr·ªã ƒë∆°n h√†ng trung b√¨nh (AOV).
        """
        total_revenue = self.data[total_col].sum()
        total_orders = self.data[order_id_col].nunique()
        aov = total_revenue / total_orders if total_orders > 0 else 0
        return aov

    def calculate_clv(self, customer_id_col, order_id_col, total_col, retention_rate=0.6, discount_rate=0.1):
        # T√≠nh trung b√¨nh gi√° tr·ªã ƒë∆°n h√†ng
        average_order_value = self.data.groupby(customer_id_col)[total_col].mean().mean()

        # T√≠nh t·∫ßn su·∫•t mua h√†ng (s·ªë ƒë∆°n h√†ng trung b√¨nh m·ªói kh√°ch h√†ng)
        purchase_frequency = self.data.groupby(customer_id_col)[order_id_col].nunique().mean()

        # T√≠nh CLV
        clv = (average_order_value * purchase_frequency * retention_rate) / (1 + discount_rate - retention_rate)

        return clv

class Forecasting:
    
    def __init__(self, api_url, api_key_a, api_key_b, model_path=None):
        self.url = api_url
        self.api_key_a = api_key_a
        self.api_key_b = api_key_b
        self.model_path = model_path
        
    def get_API(self, key):
        querystring = {"keyword": f"{key}", "country": "us"}
        headers = {
            "x-rapidapi-key": self.api_key_a,
            "x-rapidapi-host": self.api_key_b
        }
        response = requests.get(self.url, headers=headers, params=querystring)
        data=response.json()
        df=None
        try:
            # Th·ª≠ c·∫•u tr√∫c ƒë·∫ßu ti√™n
            df = pd.DataFrame(data[0]['monthly_search_volumes'], columns=['month', 'searches', 'year'])
        except (KeyError, IndexError) as e:
            # N·∫øu g·∫∑p l·ªói KeyError ho·∫∑c IndexError, th·ª≠ c·∫•u tr√∫c th·ª© hai
            try:
              #  st.write("ƒêang ·ªü ch·ªó c√≥ result")
                df = pd.DataFrame(data['result'][0]['monthly_search_volumes'], columns=['month', 'searches', 'year'])
               # st.write(df)
            except KeyError as e:
                st.write("ƒê√£ h·∫øt l∆∞·ª£t API trong ng√†y h√¥m nay ho·∫∑c b·∫°n c√≥ th·ªÉ ƒëƒÉng k√≠ ·ªü t√†i kho·∫£n kh√°c")
            except Exception as e:
                st.write("L·ªói kh√°c:", e)
        except Exception as e:
            st.write("L·ªói kh√¥ng x√°c ƒë·ªãnh:", e)
        if df is not None and not df.empty:
            df['Month'] = df['month'] + ' ' + df['year'].astype(str)
            result_df = df[['Month', 'searches']]
            result_df['Month'] = pd.to_datetime(result_df['Month'], format='%B %Y')
            result_df.set_index('Month', inplace=True)
            return result_df
        else:
            return None
    def forecast_with_sarima(self, result_df, n_pred_periods, key_forecasting):
        train_size = int(len(result_df) * 0.8)
        train = result_df['searches'][:train_size]
        test = result_df['searches'][train_size:]
        
        # Create SARIMA model
        model_sarima = auto_arima(result_df['searches'], seasonal=True, m=2, d=1, trace=True, 
                                  error_action='ignore', suppress_warnings=True, stepwise=True)

        # Predict future
        fitted, confint = model_sarima.predict(n_periods=n_pred_periods, return_conf_int=True)
        date = pd.date_range(start=result_df['searches'].index[-1], periods=n_pred_periods + 1, freq='MS')[1:]
        
        # Convert prediction to Series
        fitted_seri = pd.Series(fitted, index=date, name='D·ª± ƒëo√°n l∆∞·ª£t t√¨m ki·∫øm')
        fitted_seri.index.name = "Th√°ng"

        # Calculate confidence intervals
        lower = confint[:, 0]
        upper = confint[:, 1]

        # Plot results
        plt.figure(figsize=(12, 6))
        plt.plot(result_df['searches'], label='Actual')
        plt.step(fitted_seri.index, fitted_seri, color='red', linestyle='--', label='Forecast', where='post')

        # Connect last actual data point to forecasted data
        last_actual = result_df['searches'].iloc[-1]
        first_forecast_date = fitted_seri.index[0]
        plt.plot([result_df.index[-1], first_forecast_date], [last_actual, fitted_seri.iloc[0]],
                 color='orange', linestyle='--', label='Connection')

        plt.ylim((0, max(result_df['searches'].max(), fitted_seri.max()) + 1000))
        plt.xlim((result_df.index[0], fitted_seri.index[-2]))
        plt.legend()
        plt.title(f'D·ª± b√°o l∆∞u l∆∞·ª£ng t√¨m ki·∫øm cho {key_forecasting}')
        plt.xlabel('Date')
        plt.ylabel('Search Count')
        plt.grid()
        plt.show()

        return fitted_seri,plt

    def forecast_weather(self, df, forecast_days,location_forecasting, time_step=30):
        if self.model_path is None:
            raise ValueError("Model path is not provided")

        model = load_model(self.model_path)
        df['time'] = pd.to_datetime(df['time'])
        df.set_index('time', inplace=True)
        df = df[['tavg']]  # Only keep the average temperature column
        
        # Split data into train and test
        train_size = int(len(df) * 0.8)
        train_data = df[:train_size]
        test_data = df[train_size:]

        # Normalize data
        scaler = MinMaxScaler(feature_range=(0, 1))
        scaled_train_data = scaler.fit_transform(train_data)
        scaled_test_data = scaler.transform(test_data)
        temp_input = scaled_test_data[-time_step:]
        forecasted_values = []

        for _ in range(forecast_days):
            temp_input_reshaped = temp_input.reshape(1, time_step, 1)
            pred = model.predict(temp_input_reshaped, verbose=0)
            forecasted_values.append(pred[0, 0])
            temp_input = np.append(temp_input, pred)[-time_step:]

        # Inverse scaling to get actual temperature values
        forecasted_values = scaler.inverse_transform(np.array(forecasted_values).reshape(-1, 1))
        forecasted_values_flat = forecasted_values.flatten()

        # Plot forecast
        plt.figure(figsize=(15, 5))
        plt.plot(df.index, df['tavg'], label='Nhi·ªát ƒë·ªô th·ª±c t·∫ø', color='red')
        forecast_index = pd.date_range(start=df.index[-1], periods=forecast_days + 1, freq='D')[1:]
        plt.plot(forecast_index, forecasted_values, label=f'D·ª± b√°o {forecast_days} ng√†y t·ªõi', color='purple')
        fitted_seri = pd.Series(forecasted_values_flat, index=forecast_index, name='D·ª± b√°o nhi·ªát ƒë·ªô')
        fitted_seri.index.name = "Ng√†y"
        plt.xlabel('Th·ªùi gian')
        plt.ylabel('Nhi·ªát ƒë·ªô trung b√¨nh')
        plt.title(f'D·ª± b√°o nhi·ªát ƒë·ªô trung b√¨nh {location_forecasting} trong {forecast_days} ng√†y t·ªõi')
        plt.legend()
        plt.show()

        return fitted_seri,plt
    def check_input(self,input_value):
        if not input_value:  # N·∫øu gi√° tr·ªã b·ªã b·ªè tr·ªëng
            st.warning(f"H√£y nh·∫≠p gi√° tr·ªã d·ª± b√°o keywords ·ªü b√™n tr√°i tr∆∞·ªõc khi ti·∫øp t·ª•c!", icon="‚ö†Ô∏è")
            return False
        return True
class DataVisualization:
    def __init__(self, df_selection):
        self.df_selection = df_selection

    def update_fig_layout(self, fig, title):
        """
        C·∫≠p nh·∫≠t b·ªë c·ª•c bi·ªÉu ƒë·ªì v·ªõi ti√™u ƒë·ªÅ lu√¥n cƒÉn gi·ªØa khung h√¨nh, b·∫•t k·ªÉ k√≠ch th∆∞·ªõc thay ƒë·ªïi.
        
        :param fig: ƒê·ªëi t∆∞·ª£ng bi·ªÉu ƒë·ªì Plotly
        :param title: Ti√™u ƒë·ªÅ c·ªßa bi·ªÉu ƒë·ªì
        :return: Bi·ªÉu ƒë·ªì ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi b·ªë c·ª•c m·ªõi
        """
        fig.update_layout(
            title={
                'text': f'<b>{title}</b>',
                'x': 0.5,  # CƒÉn gi·ªØa ti√™u ƒë·ªÅ theo chi·ªÅu ngang
                'xanchor': 'center',  # C·ªë ƒë·ªãnh ti√™u ƒë·ªÅ v√†o gi·ªØa
                'yanchor': 'top',  # Ti√™u ƒë·ªÅ n·∫±m ·ªü tr√™n c√πng
                'y': 0.95,  # Kho·∫£ng c√°ch ti√™u ƒë·ªÅ so v·ªõi khung (cao h∆°n v√πng bi·ªÉu ƒë·ªì)
                'font': dict(size=18, color="#333333")  # Font ti√™u ƒë·ªÅ
            },
            autosize=True,  # T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc
            paper_bgcolor='#F5F5F5',  # M√†u n·ªÅn ngo√†i (x√°m nh·∫°t)
            plot_bgcolor='#FFFFFF',  # M√†u n·ªÅn trong (tr·∫Øng)
            margin=dict(l=10, r=10, t=80, b=10),  # L·ªÅ ƒë·ªß r·ªông cho ti√™u ƒë·ªÅ
            xaxis=dict(
                showline=True,
                linewidth=1.5,
                linecolor="#333333",
                mirror=True,
                gridcolor='#E0E0E0',
                zeroline=False,
                ticks='outside',
                tickfont=dict(size=12, color="#333333")
            ),
            yaxis=dict(
                showline=True,
                linewidth=1.5,
                linecolor="#333333",
                mirror=True,
                gridcolor='#E0E0E0',
                zeroline=False,
                ticks='outside',
                tickfont=dict(size=12, color="#333333")
            )
        )
        return fig
    def plot_job_analysis(self):
        """Plot a bar chart for the distribution of customers by job."""
        job_count = self.df_selection['job'].value_counts().reset_index()
        job_count.columns = ['C√¥ng vi·ªác', 'S·ªë l∆∞·ª£ng']

        fig = px.bar(
            job_count,
            x='S·ªë l∆∞·ª£ng',
            y='C√¥ng vi·ªác',
            orientation='h',
            color='S·ªë l∆∞·ª£ng',
            color_continuous_scale=px.colors.sequential.Blues
        )

        fig.update_layout(coloraxis_showscale=False)
        return self.update_fig_layout(fig, 'S·ªë L∆∞·ª£ng Kh√°ch H√†ng Theo C√¥ng Vi·ªác')
    def plot_gender_pie_chart(self):
        """Plot a pie chart showing customer distribution by gender."""
        gender_count = self.df_selection['sex'].value_counts().reset_index()
        gender_count.columns = ['sex', 'Number of customers']

        fig = px.pie(
            gender_count,
            values='Number of customers',
            names='sex',
            title='<b>Number of customers by Gender</b>',
            color_discrete_sequence=px.colors.sequential.Blues
        )

        return self.update_fig_layout(fig, 'T·ª∑ L·ªá Kh√°ch H√†ng Theo Gi·ªõi T√≠nh')
    def plot_location_analysis(self):
        """Plot a bar chart for the number of customers by location."""
        location_count = self.df_selection['address'].value_counts().reset_index()
        location_count.columns = ['ƒê·ªãa ƒëi·ªÉm', 'S·ªë l∆∞·ª£ng kh√°ch h√†ng']

        fig = px.bar(
            location_count,
            x='ƒê·ªãa ƒëi·ªÉm',
            y='S·ªë l∆∞·ª£ng kh√°ch h√†ng',
            color='S·ªë l∆∞·ª£ng kh√°ch h√†ng',
            color_continuous_scale=px.colors.sequential.Blues
        )

        fig.update_layout(coloraxis_showscale=False)
        return self.update_fig_layout(fig, 'S·ªë L∆∞·ª£ng Kh√°ch H√†ng Theo ƒê·ªãa ƒêi·ªÉm B√°n')
    def plot_age_distribution(self):
        """Plot a histogram and normal distribution curve for customer age."""
        ages = self.df_selection['age']  # D·ªØ li·ªáu tu·ªïi
        hist_data = np.histogram(ages, bins=10)  # T·∫°o histogram v·ªõi 10 bins

        fig = go.Figure()

        # Th√™m bi·ªÉu ƒë·ªì c·ªôt
        fig.add_trace(go.Bar(
            x=hist_data[1][:-1],  # C√°c gi√° tr·ªã bi√™n c·ªßa bins
            y=hist_data[0],  # T·∫ßn s·ªë
            marker=dict(
                colorscale='Blues',  # Thang m√†u xanh
                color=hist_data[0]   # M√†u d·ª±a tr√™n t·∫ßn s·ªë
            ),
            name='Number of Customers',
            opacity=0.8
        ))

        # T√≠nh to√°n ph√¢n ph·ªëi chu·∫©n
        mu, std = norm.fit(ages)  # Trung b√¨nh v√† ƒë·ªô l·ªách chu·∫©n
        x = np.linspace(min(ages), max(ages), 1000)  # 1000 ƒëi·ªÉm ƒë·ªÉ v·∫Ω ƒë∆∞·ªùng ph√¢n ph·ªëi
        p = norm.pdf(x, mu, std)  # M·∫≠t ƒë·ªô x√°c su·∫•t
        p_scaled = p * max(hist_data[0]) / max(p)  # Chu·∫©n h√≥a theo histogram

        # Th√™m ƒë∆∞·ªùng ph√¢n ph·ªëi chu·∫©n
        fig.add_trace(go.Scatter(
            x=x,
            y=p_scaled,
            mode='lines',
            line=dict(color='Blue', width=2, dash='dash'),
            name='Ph√¢n ph·ªëi chu·∫©n'
        ))

        # Th√™m layout v√†o ƒë·ªì th·ªã
        return self.update_fig_layout(fig, 'Ph√¢n B·ªë Kh√°ch H√†ng Theo ƒê·ªô Tu·ªïi')
    def plot_revenue_by_product_type(self): 
    # Group and aggregate the revenue by product type
        revenue_by_product_type = self.df_selection.groupby('type')['Doanh thu'].sum().reset_index()
        revenue_by_product_type = revenue_by_product_type.sort_values(by='Doanh thu', ascending=False)

        # Create the pie chart with a blue color theme
        fig_pie = px.pie(
            revenue_by_product_type,
            names='type',
            values='Doanh thu',
            color_discrete_sequence=px.colors.sequential.Blues,  # Updated to use a discrete blue color scale
            title='T·ª∑ Tr·ªçng Doanh Thu Theo Lo·∫°i N·ªìng ƒê·ªô'
        )

        # Update the traces to include percentage and label
        fig_pie.update_traces(textinfo='percent+label')
        # Apply additional layout updates
        return self.update_fig_layout(fig_pie, 'T·ª∑ Tr·ªçng Doanh Thu Theo Lo·∫°i N·ªìng ƒê·ªô')
    def plot_top_products_by_revenue(self, top_n=10):
        df_best_revenue = self.df_selection.groupby('brand')['Doanh thu'].sum().nlargest(top_n).reset_index()
        fig = px.bar(df_best_revenue, 
                     x='brand', 
                     y='Doanh thu',
                     color='Doanh thu',
                     color_continuous_scale=px.colors.sequential.Blues)
        fig.update_layout(coloraxis_showscale=False)
        return self.update_fig_layout(fig, f'Top {top_n} H√£ng B√°n Ch·∫°y Nh·∫•t Theo Doanh Thu')
    def plot_monthly_orders_and_products(self):
        self.df_selection['order_time'] = pd.to_datetime(self.df_selection['order_time'])
        self.df_selection['Th√°ng'] = self.df_selection['order_time'].dt.to_period('M')
        monthly_orders = self.df_selection.groupby('Th√°ng').agg(
            S·ªë_l∆∞·ª£ng_ƒë∆°n_h√†ng=('order_id', 'nunique'), 
            T·ªïng_S·ªë_L∆∞·ª£ng_S·∫£n_Ph·∫©m=('product_id', 'count')
        ).reset_index()
        monthly_orders['Th√°ng'] = monthly_orders['Th√°ng'].dt.to_timestamp()
        long_df = pd.melt(monthly_orders, id_vars=['Th√°ng'],
                          value_vars=['S·ªë_l∆∞·ª£ng_ƒë∆°n_h√†ng', 'T·ªïng_S·ªë_L∆∞·ª£ng_S·∫£n_Ph·∫©m'],
                          var_name='Category', value_name='S·ªë l∆∞·ª£ng')
        fig = px.line(long_df,
                      x='Th√°ng',
                      y='S·ªë l∆∞·ª£ng',
                      color='Category',
                      labels={'Category': 'Lo·∫°i S·ªë li·ªáu'},
                      color_discrete_map={'S·ªë_l∆∞·ª£ng_ƒë∆°n_h√†ng': px.colors.sequential.Blues[3], 
                                          'T·ªïng_S·ªë_L∆∞·ª£ng_S·∫£n_Ph·∫©m': px.colors.sequential.Blues[5]},
                      markers=True)
        return self.update_fig_layout(fig, 'S·ªë ƒê∆°n H√†ng V√† S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m Theo Th√°ng')
    def plot_product_by_type(self):
        """Plot the number of products by type."""
        df_product_by_type = self.df_selection.groupby('type').size().reset_index(name='Number of Products')

        fig = px.bar(
            df_product_by_type,
            x='type',
            y='Number of Products',
            color='Number of Products',
            color_continuous_scale=px.colors.sequential.Blues
        )

        return self.update_fig_layout(fig, 'S·ªë L∆∞·ª£ng C√°c Lo·∫°i S·∫£n Ph·∫©m Theo N·ªìng ƒê·ªô')
    def plot_production_location_count(self):
        """Plot the number of products by production location."""
        df_location_count = self.df_selection.groupby('itemLocation').size().reset_index(name='Number of Products')

        fig = px.bar(
            df_location_count,
            x='itemLocation',
            y='Number of Products',
            color='Number of Products',
            color_continuous_scale=px.colors.sequential.Blues
        )

        return self.update_fig_layout(fig, 'S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m Theo ƒê·ªãa ƒêi·ªÉm S·∫£n Xu·∫•t')
    def plot_price_vs_product_type(self):
        """Plot a scatter plot of price vs. product type."""
        fig = px.scatter(
            self.df_selection,
            x='type',
            y='price',
            color='type',
            color_discrete_sequence=px.colors.sequential.Blues
        )

        fig.update_traces(marker=dict(size=10))
        return self.update_fig_layout(fig, 'M·ªëi T∆∞∆°ng Quan Gi·ªØa Gi√° S·∫£n Ph·∫©m V√† Lo·∫°i S·∫£n Ph·∫©m')
    def plot_order_value_distribution(self):
        """Plot a box plot for the distribution of order values."""
        fig = px.box(
            self.df_selection,
            y='price',
            color_discrete_sequence=[px.colors.sequential.Blues[3]]
        )

        return self.update_fig_layout(fig, 'Ph√¢n Ph·ªëi Gi√° Tr·ªã ƒê∆°n H√†ng')
    def plot_orders_by_city(self):
        """Plot a bar chart for the number of orders by city."""
        order_counts = self.df_selection.groupby('address').size().reset_index(name='Number of Orders')

        fig = px.bar(
            order_counts,
            x='address',
            y='Number of Orders',
            color='Number of Orders',
            color_continuous_scale=px.colors.sequential.Blues
        )

        return self.update_fig_layout(fig, 'S·ªë L∆∞·ª£ng ƒê∆°n H√†ng Theo T·ª´ng Th√†nh Ph·ªë')
    def plot_price_vs_quantity(self):
        """Plot a scatter plot of price vs. quantity sold."""
        color_scale = px.colors.sequential.Blues
        point_color = color_scale[3]

        fig = px.scatter(
            self.df_selection,
            x='price',
            y='quanlity',
            title='<b>Scatter Plot of Product Price vs Quantity Sold</b>',
            labels={'price': 'Product Price', 'quanlity': 'Quantity Sold'},
            size='quanlity',
            color_discrete_sequence=[point_color]
        )

        return self.update_fig_layout(fig, 'M·ªëi T∆∞∆°ng Quan Gi·ªØa Gi√° S·∫£n Ph·∫©m V√† S·ªë L∆∞·ª£ng B√°n')
    def calculate_clv(self, customer_id_col, order_id_col, total_col, period='M', retention_rate=0.6, discount_rate=0.1):
        # T√≠nh to√°n c√°c ch·ªâ s·ªë
        average_order_value = self.df_selection.groupby(order_id_col)[total_col].sum().mean()
        purchase_frequency = self.df_selection[order_id_col].nunique() / self.df_selection[customer_id_col].nunique()
        clv = (average_order_value * purchase_frequency * retention_rate) / (1 + discount_rate - retention_rate)

        # T·∫°o DataFrame k·∫øt qu·∫£
        clv_data = pd.DataFrame({
            'Ch·ªâ s·ªë': ['Gi√° tr·ªã trung b√¨nh ƒë∆°n h√†ng', 'T·∫ßn su·∫•t mua h√†ng', 'T·ª∑ l·ªá gi·ªØ ch√¢n', 'CLV d·ª± ƒëo√°n'],
            'Gi√° tr·ªã': [average_order_value, purchase_frequency, retention_rate, clv]
        })

        # T·∫°o bi·ªÉu ƒë·ªì
        fig = px.bar(
            clv_data,
            x='Ch·ªâ s·ªë',
            y='Gi√° tr·ªã',
            color='Ch·ªâ s·ªë',
            text='Gi√° tr·ªã',  # Th√™m d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã gi√° tr·ªã
            color_discrete_sequence=px.colors.sequential.Blues
        )

        # ƒê·ªãnh d·∫°ng hi·ªÉn th·ªã gi√° tr·ªã tr√™n c√°c thanh
        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')

        # T·∫Øt thanh hi·ªÉn th·ªã m√†u
        fig.update_layout(coloraxis_showscale=False)

        return self.update_fig_layout(fig, 'Gi√° Tr·ªã V√≤ng ƒê·ªùi Kh√°ch H√†ng (CLV)')
    def plot_customer_return_rate(self, customer_id_col):
        # Calculate the number of returning and new customers
        customer_order_counts = self.df_selection[customer_id_col].value_counts()
        return_customers = customer_order_counts[customer_order_counts > 1].count()
        total_customers = customer_order_counts.count()

        # Define categories and their respective values
        categories = ['Kh√°ch h√†ng quay l·∫°i', 'Kh√°ch h√†ng m·ªõi']
        values = [(return_customers / total_customers) * 100, 100 - (return_customers / total_customers) * 100]

        # Create a pie chart
        fig = go.Figure(data=[go.Pie(
            labels=categories,
            values=values,
            hole=0.4,
            marker=dict(colors=px.colors.sequential.Blues[2:4])  # Use the first two colors of the Blues color scale
        )])

        # Update the figure layout
        return self.update_fig_layout(fig, 'T·ª∑ L·ªá Kh√°ch H√†ng Quay L·∫°i')
    def plot_sales_map(self):
        fig = px.scatter_mapbox(
            self.df_selection,
            lat="lat",
            lon="lon",
            hover_name="address",
            hover_data={"Doanh thu": True},
            size="Doanh thu",
            color="Doanh thu",
            color_continuous_scale=px.colors.sequential.Blues,
            size_max=15,
            zoom=5,
           # title="Doanh thu theo th√†nh ph·ªë t·∫°i Vi·ªát Nam"
        )

        # S·ª≠ d·ª•ng b·∫£n ƒë·ªì Mapbox m·∫∑c ƒë·ªãnh
        fig.update_layout(
            mapbox_style="carto-positron",
            margin={"r": 0, "t": 50, "l": 0, "b": 0},
            title_x=0.5
        )

        return self.update_fig_layout(fig, "Doanh Thu Theo Th√†nh Ph·ªë T·∫°i Vi·ªát Nam")
def Home(df_selection):
    with st.expander("VIEW ORDER DATASET"):
        showData = st.multiselect(
            'Filter:',
            options=[
                "order_time", "orderdetail_id", "order_id", "customer_id", 
                "product_id", "brand", "type", "price", "quanlity","itemLocation", 
                "weather", "address", "sex", "age", "lat", "lon","Doanh thu"
            ],
            default=[
                "order_time", "orderdetail_id", "order_id", "customer_id", 
                "product_id", "brand", "type", "price", "quanlity","itemLocation", 
                "weather", "address", "sex", "age", "lat", "lon","Doanh thu"
            ]
        )
        
        # Display filtered data
        st.dataframe(df_selection[showData], use_container_width=True)

        # Metrics Calculation
    df_selection['Doanh thu'] = df_selection['price'] * df_selection['quanlity']
    total_revenue = df_selection['Doanh thu'].sum()
    metrics=CustomerMetrics(df_selection)
    clv = metrics.calculate_clv('customer_id', 'order_id', 'Doanh thu')
    aov = metrics.calculate_aov('Doanh thu', 'order_id')
    total_orders = metrics.calculate_total_orders('order_id')
    retention_rate = metrics.calculate_customer_retention_rate('customer_id')
    if not df_selection.empty:  # Check if df_selection is not empty
        df_selection['Doanh thu'] = df_selection['price'] * df_selection['quanlity']
        total_revenue = df_selection['Doanh thu'].sum()
        clv = metrics.calculate_clv('customer_id', 'order_id', 'Doanh thu')
        aov = metrics.calculate_aov('Doanh thu', 'order_id')
        total_orders = metrics.calculate_total_orders('order_id')
        retention_rate = metrics.calculate_customer_retention_rate('customer_id')
    else:
        total_revenue = 0
        clv = 0
        aov = 0
        total_orders = 0
        retention_rate = 0
        # Display metrics
    st.header('Metrics Overview')
    total1, total2, total3, total4, total5 = st.columns(5, gap='small')
        
    with total1:
        st.info("T·ªïng doanh thu",icon="üí∞")
        st.metric(label="",value=f"{total_revenue:.2f} VND")
    with total2:
        st.info("Gi√° tr·ªã CLV",icon="üí∞")
        st.metric(label="",value=f"{clv:.2f} VND")
    with total3:
        st.info("Gi√° tr·ªã AOV",icon="üí∞")
        st.metric(label="",value=f"{aov:.2f} VND")
    with total4:
        st.info("T·ªïng s·ªë ƒë∆°n h√†ng",icon="üõí")
        st.metric(label="",value=f"{total_orders:.0f}")
    with total5:
        st.info('T·ª∑ l·ªá gi·ªØ ch√¢n kh√°ch h√†ng',icon="üèÉüèª")
        st.metric(label="", value=f"{retention_rate:.2f}%")

def selection(brand,type_perfume,selected_price_range,item_location,weather,address,sex,selected_age_range,month_review_filter,year_review_filter):
    df_selection = filtered_data.query(
        "brand in @brand & "
        "type in @type_perfume & "
        "price >= @selected_price_range[0] & price <= @selected_price_range[1] & "
        "itemLocation in @item_location & "
        "weather in @weather & "
        "address in @address & "
        "sex in @sex & "
        "age >= @selected_age_range[0] & age <= @selected_age_range[1] & "
        "order_time.dt.month in @month_review_filter & "
        "order_time.dt.year in @year_review_filter"
    )
    return df_selection
def filter_main():
    filtermanager=FilterManager(filtered_data)
    brand_ft,type_perfume_ft,selected_price_range_ft,item_location_ft,weather_ft,address_ft,sex_ft,selected_age_range_ft,month_review_filter_ft,year_review_filter_ft=filtermanager.render_filters()
    df_selection=selection(brand_ft,type_perfume_ft,selected_price_range_ft,item_location_ft,weather_ft,address_ft,sex_ft,selected_age_range_ft,month_review_filter_ft,year_review_filter_ft)
    
server = r'DESKTOP-Q6B5CSD\NAMNH'
database = 'Capstone2'
username = 'sa'
password = 'Nam@15092003'
db_manager = DatabaseManager(server, database, username, password)
# K·∫øt n·ªëi ƒë·∫øn database
db_manager.connect()
query = '''
SELECT o.order_time, od.orderdetail_id, o.order_id, c.customer_id, c.job, 
       p.product_id, p.brand, p.type, p.price, od.quanlity, p.itemLocation,
       p.weather, c.address, c.sex, c.age
FROM data_khachhang c
INNER JOIN Orders o ON c.customer_id = o.customer_id
INNER JOIN Order_detail od ON o.order_id = od.order_id
INNER JOIN data_sanpham p ON od.sanpham_id = p.product_id'''
query1 = '''SELECT * from data_toado'''
query2 = '''SELECT * from data_khachhang'''

# Fetch data from SQL Server
with db_manager.engine.connect() as connection:
    df = pd.read_sql(query, connection)
    toado= pd.read_sql(query1, connection)
    diadiem=pd.read_sql(query2, connection)
# Ensure order_time is in datetime format
df['order_time'] = pd.to_datetime(df['order_time'], errors='coerce')

# Handle address data
diadiem['address']=diadiem['address'].str.split(',').str[-1].str.strip()
df['address'] = df['address'].str.split(',').str[-1].str.strip()
filtered_data = pd.merge(df, toado, left_on='address', right_on='city', how='inner').drop(columns=['city'])

# Calculate revenue
filtered_data['Doanh thu'] = filtered_data['price'] * filtered_data['quanlity']
def sideBar():
    filtermanager=FilterManager(filtered_data)
    if selected=="Dashboard" or selected == "Analytics":
        brand_ft,type_perfume_ft,selected_price_range_ft,item_location_ft,weather_ft,address_ft,sex_ft,selected_age_range_ft,month_review_filter_ft,year_review_filter_ft=filtermanager.render_filters()
        df_selection=selection(brand_ft,type_perfume_ft,selected_price_range_ft,item_location_ft,weather_ft,address_ft,sex_ft,selected_age_range_ft,month_review_filter_ft,year_review_filter_ft)
        analytics = DataVisualization(df_selection)
        if selected=="Dashboard":
            Home(df_selection)
            st.plotly_chart(analytics.plot_job_analysis(), use_container_width=True)
            st.plotly_chart(analytics.plot_location_analysis(), use_container_width=True)
            st.plotly_chart(analytics.plot_revenue_by_product_type(), use_container_width=True)
            st.plotly_chart(analytics.plot_top_products_by_revenue(), use_container_width=True)
            st.plotly_chart(analytics.plot_monthly_orders_and_products(), use_container_width=True)
            st.plotly_chart(analytics.plot_order_value_distribution(), use_container_width=True)
            st.plotly_chart(analytics.calculate_clv( 'customer_id', 'order_id', 'price'), use_container_width=True)
            st.plotly_chart(analytics.plot_customer_return_rate( 'customer_id'), use_container_width=True)
            st.plotly_chart(analytics.plot_sales_map(), use_container_width=True)
        if selected == "Analytics":
            with st.expander("T·ªïng Quan V·ªÅ Kh√°ch H√†ng"):
                col1, col2 = st.columns(2)
                with col1:
                    st.plotly_chart(analytics.plot_job_analysis(), use_container_width=True)
                with col2:
                    st.plotly_chart(analytics.plot_gender_pie_chart(), use_container_width=True)

                # H√†ng th·ª© hai v·ªõi 2 bi·ªÉu ƒë·ªì kh√°c
                col3, col4 = st.columns(2)
                with col3:
                    st.plotly_chart(analytics.plot_location_analysis(), use_container_width=True)
                with col4:
                    st.plotly_chart(analytics.plot_age_distribution(), use_container_width=True)
            with st.expander("T·ªïng Quan V·ªÅ S·∫£n Ph·∫©m"):
                col1, col2 = st.columns(2)
                with col1:
                    st.plotly_chart(analytics.plot_top_products_by_revenue(), use_container_width=True)
                with col2:
                    st.plotly_chart(analytics.plot_product_by_type(), use_container_width=True)

                # H√†ng th·ª© hai v·ªõi 2 bi·ªÉu ƒë·ªì
                col3, col4 = st.columns(2)
                with col3:
                    st.plotly_chart(analytics.plot_production_location_count(), use_container_width=True)
                with col4:
                    st.plotly_chart(analytics.plot_price_vs_product_type(), use_container_width=True)
            with st.container():
                st.subheader("T·ªïng Quan V·ªÅ ƒê∆°n H√†ng")
                col1, col2 = st.columns(2)
                with col1:
                    st.plotly_chart(analytics.plot_order_value_distribution(), use_container_width=True)
                with col2:
                    st.plotly_chart(analytics.plot_orders_by_city(), use_container_width=True)

                # H√†ng th·ª© hai v·ªõi 2 bi·ªÉu ƒë·ªì
                col3, col4 = st.columns(2)
                with col3:
                    st.plotly_chart(analytics.plot_price_vs_quantity(), use_container_width=True)
                with col4:
                    st.plotly_chart(analytics.plot_sales_map(), use_container_width=True)
    if selected == "Forecasting":
        st.subheader("Trang d·ª± b√°o v√† ƒë·ªÅ xu·∫•t")
        # L·∫•y th√¥ng tin b·ªô l·ªçc
        key_forecasting, location_forecasting, time_keyword_forecasting, time_weather_forecasting = filtermanager.filter_forecasting()
        url = "https://semrush-keyword-magic-tool.p.rapidapi.com/keyword-research"
        api_key = "510309684fmsha6871e657668cfep13e5a1jsn20f6f5b9a769"
        api_host = "semrush-keyword-magic-tool.p.rapidapi.com"
        model_path = f'{location_forecasting}_best_weather_model.keras'
        query_location = f'''SELECT * FROM [dbo].[data_[{location_forecasting}]]]'''
        # Kh·ªüi t·∫°o l·ªõp Forecasting
        forecasting = Forecasting(url, api_key, api_host, model_path)
        forecast_days = int(time_weather_forecasting)
        result_df=None
        predictions=None
        if key_forecasting:
            try:
                result_df = forecasting.get_API(key_forecasting)
                if result_df is None or result_df.empty:
                    st.write("API kh√¥ng tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá.")
            except Exception as e:
                st.write(f"L·ªói khi g·ªçi API: {e}")
        else:
            st.write("Key forecasting ch∆∞a ƒë∆∞·ª£c cung c·∫•p. Vui l√≤ng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.")
        try:
            n_pred_periods = int(time_keyword_forecasting)
        except ValueError:
            forecasting.check_input(time_keyword_forecasting)
            st.write("Th·ªùi gian d·ª± b√°o (time_keyword_forecasting) kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë nguy√™n.")
            return
        col1, col2 = st.columns([3.5, 1.5])
        with col1:
            if result_df is not None:
                predictions, plot_obj_keyword = forecasting.forecast_with_sarima(result_df, n_pred_periods,key_forecasting)
                if not predictions.empty:
                    st.pyplot(plot_obj_keyword)  # Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì d·ª± ƒëo√°n
                else:
                    st.write(f"{key_forecasting} kh√¥ng c√≥ s·ª± t√¨m ki·∫øm")
            with db_manager.engine.connect() as connection:
                df = pd.read_sql(query_location, connection)
            forecastlist, plt_obj_weather = forecasting.forecast_weather(df, forecast_days,location_forecasting, time_step=30)
            st.pyplot(plt_obj_weather)
        with col2:
            try:
                if not predictions.empty:
                    st.write("K·∫øt qu·∫£ d·ª± ƒëo√°n Keyword:")  # Hi·ªÉn th·ªã k·∫øt qu·∫£ d·ª± ƒëo√°n trong c·ªôt chi·∫øm 20%
                    st.write(predictions)
            except:
                None
            st.write(f"K·∫øt qu·∫£ d·ª± ƒëo√°n th·ªùi ti·∫øt trong {time_weather_forecasting} ng√†y ·ªü {location_forecasting}")
            st.write(forecastlist)

sideBar()
hide_st_style=""" 

<style>
#MainMenu {visibility:hidden;}
footer {visibility:hidden;}
header {visibility:hidden;}
</style>
"""